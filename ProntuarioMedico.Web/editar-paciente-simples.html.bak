<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Paciente - Sistema de Prontuários</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="styles.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="index.html">
                <i class="fas fa-heartbeat me-2"></i>
                Sistema de Prontuários
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item dropdown">
                        <a class="nav-link" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" aria-label="Menu de navegação">
                            <i class="fas fa-bars"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="index.html"><i class="fas fa-home me-2"></i>Início</a></li>
                            <li><a class="dropdown-item" href="pacientes.html"><i class="fas fa-users me-2"></i>Pacientes</a></li>
                            <li><a class="dropdown-item" href="estatisticas-simples.html"><i class="fas fa-chart-bar me-2"></i>Estatísticas</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="Auth.logout()"><i class="fas fa-sign-out-alt me-2"></i>Sair</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div id="content">
            <h2>Carregando dados para edição...</h2>
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>

    <script>
        let currentPatient = null;

        async function loadPatientForEdit() {
            try {
                console.log('Iniciando carregamento para edição...');
                
                // Get patient ID from URL
                const urlParams = new URLSearchParams(window.location.search);
                const patientId = urlParams.get('id');
                
                console.log('Patient ID:', patientId);
                
                if (!patientId) {
                    throw new Error('ID do paciente não encontrado na URL');
                }
                
                console.log('Fazendo requisição...');
                const response = await fetch(`http://prontuario-api-1758591010.brazilsouth.azurecontainer.io:8080/api/pacientes/${patientId}`);
                
                console.log('Response status:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                console.log('Parsing JSON...');
                const patient = await response.json();
                
                console.log('Patient data:', patient);
                currentPatient = patient;
                
                console.log('Rendering edit form...');
                
                document.getElementById('content').innerHTML = `
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h2><i class="fas fa-edit"></i> Editar: ${patient.nome}</h2>
                                <div>
                                    <a href="detalhes-paciente-simples.html?id=${patient.id}" class="btn btn-secondary">
                                        <i class="fas fa-arrow-left"></i> Cancelar
                                    </a>
                                </div>
                            </div>
                            
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">Dados do Paciente</h5>
                                </div>
                                <div class="card-body">
                                    <form id="editForm">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="nome" class="form-label">Nome Completo *</label>
                                                    <input type="text" class="form-control" id="nome" value="${patient.nome || ''}" required>
                                                    <div class="invalid-feedback">
                                                        Por favor, informe o nome completo.
                                                    </div>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="idade" class="form-label">Idade *</label>
                                                    <input type="number" class="form-control" id="idade" value="${patient.idade || ''}" required min="0" max="120">
                                                    <div class="invalid-feedback">
                                                        Por favor, informe uma idade válida (0-120 anos).
                                                    </div>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="dataNascimento" class="form-label">Data de Nascimento *</label>
                                                    <input type="date" class="form-control" id="dataNascimento" value="${formatDateForInput(patient.dataNascimento)}" required>
                                                    <div class="invalid-feedback">
                                                        Por favor, informe a data de nascimento.
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label for="cep" class="form-label">CEP *</label>
                                                    <input type="text" class="form-control" id="cep" value="${patient.cep || ''}" 
                                                           placeholder="Ex: 01310-100" maxlength="9" pattern="[0-9]{5}-[0-9]{3}" required>
                                                    <div class="invalid-feedback">
                                                        Por favor, informe um CEP válido no formato XXXXX-XXX.
                                                    </div>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="rua" class="form-label">Rua/Avenida *</label>
                                                    <input type="text" class="form-control" id="rua" value="${patient.rua || ''}" 
                                                           placeholder="Ex: Rua das Flores, Avenida Paulista" required>
                                                    <div class="invalid-feedback">
                                                        Por favor, informe a rua ou avenida.
                                                    </div>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="numero" class="form-label">Número *</label>
                                                    <input type="text" class="form-control" id="numero" value="${patient.numero || ''}" 
                                                           placeholder="Ex: 123, 456-A" required>
                                                    <div class="invalid-feedback">
                                                        Por favor, informe o número.
                                                    </div>
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="complemento" class="form-label">Complemento</label>
                                                    <input type="text" class="form-control" id="complemento" value="${patient.complemento || ''}" 
                                                           placeholder="Ex: Apto 45, Bloco B, Casa 2">
                                                </div>
                                                
                                                <div class="mb-3">
                                                    <label for="bairro" class="form-label">Bairro *</label>
                                                    <input type="text" class="form-control" id="bairro" value="${patient.bairro || ''}" 
                                                           placeholder="Ex: Centro, Vila Nova" required>
                                                    <div class="invalid-feedback">
                                                        Por favor, informe o bairro.
                                                    </div>
                                                </div>
                                                
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="mb-3">
                                                            <label for="estado" class="form-label">Estado *</label>
                                                            <select class="form-select" id="estado" required>
                                                                <option value="">Selecione o Estado</option>
                                                            </select>
                                                            <div class="invalid-feedback">
                                                                Por favor, selecione o estado.
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="mb-3">
                                                            <label for="cidade" class="form-label">Cidade *</label>
                                                            <select class="form-select" id="cidade" required disabled>
                                                                <option value="">Selecione a Cidade</option>
                                                            </select>
                                                            <div class="invalid-feedback">
                                                                Por favor, selecione a cidade.
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="d-flex justify-content-between">
                                            <a href="detalhes-paciente-simples.html?id=${patient.id}" class="btn btn-secondary">
                                                <i class="fas fa-times-circle"></i> Cancelar
                                            </a>
                                            <button type="button" class="btn btn-primary" onclick="savePatient()" id="saveBtn">
                                                <i class="fas fa-check-circle"></i> Salvar Alterações
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                console.log('Form renderizado com sucesso!');
                
                // Configurar validações e campos
                setupEditValidations();
                
                // Definir valores dos selects
                setSelectValues(patient);
                
            } catch (error) {
                console.error('Erro:', error);
                
                document.getElementById('content').innerHTML = `
                    <div class="alert alert-danger">
                        <h4>Erro ao carregar paciente para edição</h4>
                        <p>${error.message}</p>
                        <a href="pacientes.html" class="btn btn-secondary">Voltar à Lista</a>
                    </div>
                `;
            }
        }

        async function savePatient() {
            try {
                console.log('Salvando paciente...');
                
                // Disable save button
                const saveBtn = document.getElementById('saveBtn');
                saveBtn.disabled = true;
                saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Salvando...';
                
                // Collect form data
                const formData = {
                    id: currentPatient.id,
                    nome: document.getElementById('nome').value.trim(),
                    idade: parseInt(document.getElementById('idade').value),
                    dataNascimento: document.getElementById('dataNascimento').value || currentPatient.dataNascimento,
                    cep: document.getElementById('cep').value.trim(),
                    rua: document.getElementById('rua').value.trim(),
                    numero: document.getElementById('numero').value.trim(),
                    complemento: document.getElementById('complemento').value.trim(),
                    bairro: document.getElementById('bairro').value.trim(),
                    cidade: document.getElementById('cidade').value.trim(),
                    estado: document.getElementById('estado').value.trim().toUpperCase(),
                    // Keep existing fields that are not medical-related
                    frequenciaAtividade: currentPatient.frequenciaAtividade,
                    tempoAtividade: currentPatient.tempoAtividade,
                    locaisPraticaAtividade: currentPatient.locaisPraticaAtividade,
                    comoSoubeProjeto: currentPatient.comoSoubeProjeto,
                    tipoDeslocamento: currentPatient.tipoDeslocamento,
                    opiniaoHorarioAplicacao: currentPatient.opiniaoHorarioAplicacao,
                    // Keep existing medical fields unchanged (don't modify them)
                    historicoMedico: currentPatient.historicoMedico,
                    evolucaoSaude: currentPatient.evolucaoSaude,
                    pressao: currentPatient.pressao,
                    ausculta: currentPatient.ausculta,
                    observacoes: currentPatient.observacoes,
                    dataCriacao: currentPatient.dataCriacao,
                    dataUltimaAtualizacao: new Date().toISOString()
                };
                
                console.log('Form data:', formData);
                
                // Validate required fields
                if (!formData.nome || !formData.idade || !formData.cep || !formData.rua || !formData.numero || !formData.bairro || !formData.cidade || !formData.estado) {
                    throw new Error('Preencha todos os campos obrigatórios (marcados com *)');
                }
                
                // Make API call
                const response = await fetch(`http://prontuario-api-1758591010.brazilsouth.azurecontainer.io:8080/api/pacientes/${currentPatient.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                console.log('Save response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }
                
                console.log('Paciente salvo com sucesso!');
                
                // Show success message
                alert('Paciente atualizado com sucesso!');
                
                // Redirect to details page
                window.location.href = `detalhes-paciente-simples.html?id=${currentPatient.id}`;
                
            } catch (error) {
                console.error('Erro ao salvar:', error);
                alert('Erro ao salvar: ' + error.message);
                
                // Re-enable save button
                const saveBtn = document.getElementById('saveBtn');
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="bi bi-check-circle"></i> Salvar Alterações';
            }
        }

        function formatDateForInput(dateString) {
            if (!dateString) return '';
            const date = new Date(dateString);
            return date.toISOString().split('T')[0];
        }
        
        // Load when page is ready
        document.addEventListener('DOMContentLoaded', loadPatientForEdit);
    </script>
    
    <!-- Scripts adicionais -->
    <script src="js/endereco-brasil.js"></script>
    <script>
        // Validações específicas para edição
        function setupEditValidations() {
            setupCEPValidation();
            setupIdadeValidation();
            setupAddressFields();
            setupFormValidation();
        }
        
        function setupCEPValidation() {
            const cepInput = document.getElementById('cep');
            
            if (cepInput) {
                cepInput.addEventListener('input', function() {
                    let value = this.value.replace(/\D/g, '');
                    
                    if (value.length > 5) {
                        value = value.substring(0, 5) + '-' + value.substring(5, 8);
                    }
                    
                    this.value = value;
                    
                    const cepRegex = /^[0-9]{5}-[0-9]{3}$/;
                    if (value.length === 9 && !cepRegex.test(value)) {
                        this.setCustomValidity('CEP deve estar no formato XXXXX-XXX com apenas números');
                        this.classList.add('is-invalid');
                    } else if (value.length === 9 && cepRegex.test(value)) {
                        this.setCustomValidity('');
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            }
        }
        
        function setupIdadeValidation() {
            const idadeInput = document.getElementById('idade');
            
            if (idadeInput) {
                idadeInput.addEventListener('input', function() {
                    const idade = parseInt(this.value);
                    
                    if (isNaN(idade) || idade < 0 || idade > 120) {
                        this.setCustomValidity('Idade deve ser um número entre 0 e 120 anos');
                        this.classList.add('is-invalid');
                    } else {
                        this.setCustomValidity('');
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            }
        }
        
        function setupAddressFields() {
            try {
                const estadoSelect = document.getElementById('estado');
                const cidadeSelect = document.getElementById('cidade');
                
                if (estadoSelect && cidadeSelect) {
                    // Populando o select de estados
                    AddressUtils.populateEstadoSelect(estadoSelect, currentPatient.estado);
                    
                    // Configurando o evento de mudança do estado
                    estadoSelect.addEventListener('change', function() {
                        const estadoSelecionado = this.value;
                        if (estadoSelecionado) {
                            AddressUtils.populateCidadeSelect(cidadeSelect, estadoSelecionado, currentPatient.cidade);
                        } else {
                            cidadeSelect.innerHTML = '<option value="">Selecione a Cidade</option>';
                            cidadeSelect.disabled = true;
                        }
                    });
                    
                    // Se o paciente já tem estado definido, populamos as cidades
                    if (currentPatient.estado) {
                        AddressUtils.populateCidadeSelect(cidadeSelect, currentPatient.estado, currentPatient.cidade);
                    }
                }
            } catch (error) {
                console.error('Erro ao configurar campos de endereço:', error);
            }
        }
        
        function setupFormValidation() {
            const form = document.getElementById('editForm');
            if (form) {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    if (form.checkValidity()) {
                        savePatient();
                    } else {
                        form.classList.add('was-validated');
                    }
                });
            }
        }
        
        // Função para definir valores dos selects após carregamento
        function setSelectValues(patient) {
            setTimeout(() => {
                const estadoSelect = document.getElementById('estado');
                const cidadeSelect = document.getElementById('cidade');
                
                if (estadoSelect && patient.estado) {
                    estadoSelect.value = patient.estado;
                    
                    if (patient.cidade) {
                        loadCidades(patient.estado, 'cidade').then(() => {
                            cidadeSelect.disabled = false;
                            cidadeSelect.value = patient.cidade;
                        });
                    }
                }
            }, 500);
        }
    </script>
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Auth JS -->
    <script src="js/auth.js"></script>
    <script>
        // Inicializar autenticação
        document.addEventListener('DOMContentLoaded', function() {
            Auth.initialize();
            
            // Aguardar um pouco para garantir que o DOM está totalmente carregado
            setTimeout(() => {
                Auth.updateLogoutButtons();
            }, 100);
        });
    </script>
</body>
</html>